{
  "name": "express",
  "description": "Express for ChiÏ‡",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/express.git"
  },
  "dependencies": {
    "express": "latest"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "error": {
            "type": "object",
            "title": "Error message"
          },
          "req": {
            "type": "object",
            "title": "Express request object"
          },
          "res": {
            "type": "object",
            "title": "Express response object"
          },
          "next": {
            "type": "function",
            "title": "Express response object",
            "readonly": true
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Sending 500 error message"
      },
      "description": "500 error",
      "title": "500",
      "ns": "express",
      "name": "500",
      "env": "server",
      "fn": "console.error(input.error.stack);\n//(err, req, res, next){\nconsole.error(err.stack);\ninput.res.send(500, err.stack.toString());\n"
    },
    {
      "ports": {
        "input": {},
        "output": {
          "app": {
            "title": "App",
            "type": "function"
          },
          "express": {
            "title": "Express",
            "type": "function"
          }
        }
      },
      "require": {
        "express": "3.x.x"
      },
      "phrases": {
        "active": "Creating Express app"
      },
      "description": "express app",
      "title": "App",
      "ns": "express",
      "name": "app",
      "env": "server",
      "fn": "output = {\n  app: express(),\n  express: express\n};\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Adding Express Body Parser Middleware"
      },
      "description": "Express Body Parser",
      "title": "Body Parser",
      "ns": "express",
      "name": "bodyParser",
      "env": "server",
      "fn": "output = [input.app, 'use', input.express.bodyParser()]\n"
    },
    {
      "ports": {
        "input": {
          "server": {
            "type": "function",
            "title": "HTTP Server",
            "readonly": true,
            "required": true
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Closing server"
      },
      "description": "Close server (todo: can close any server connection, not just express)",
      "title": "Close",
      "ns": "express",
      "name": "close",
      "env": "server",
      "fn": "input.server.close();\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express Compress Middleware"
      },
      "description": "Express Compress",
      "title": "Compress",
      "ns": "express",
      "name": "compress",
      "env": "server",
      "fn": "output = [input.app, 'use', input.express.compress()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express Cookie Parser middleware"
      },
      "description": "Express Cookie Parser",
      "title": "Cookie Parser",
      "ns": "express",
      "name": "cookieParser",
      "env": "server",
      "fn": "output = [input.app, 'use', input.express.cookieParser()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express Cookie Session middleware"
      },
      "description": "Express Cookie Session",
      "title": "Cookie Session",
      "ns": "express",
      "name": "cookieSession",
      "env": "server",
      "fn": "output = [input.app, 'use', input.express.cookieSession()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express Cross-site request forgery protection middleware"
      },
      "description": "Express CSRF protection middleware",
      "title": "csfr",
      "ns": "express",
      "name": "csfr",
      "env": "server",
      "fn": "output = [input.app, 'use', input.express.csrf()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "hidden": {
            "type": "boolean",
            "title": "Hidden",
            "default": false
          },
          "icons": {
            "type": "boolean",
            "title": "Icons",
            "default": false
          },
          "filter": {
            "type": "function",
            "title": "Filter",
            "default": null
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express directory serving middleware"
      },
      "description": "Express directory serving middleware",
      "title": "Directory",
      "ns": "express",
      "name": "directory",
      "env": "server",
      "fn": "output = [input.app, 'use', input.express.directory(input.path, {\n  hidden: input.hidden,\n  icons: input.icons,\n  filter: input.filter\n})];\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "required": true,
            "readonly": true
          }
        },
        "output": {
          "error": {
            "type": "object"
          },
          "req": {
            "type": "object"
          },
          "res": {
            "type": "object"
          },
          "next": {
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Sending Express error"
      },
      "description": "express error",
      "title": "Error",
      "ns": "express",
      "name": "error",
      "env": "server",
      "fn": "output = [input.app, 'use']\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "readonly": true,
            "required": true
          },
          "path": {
            "type": "string",
            "default": "/",
            "title": "A router path",
            "description": "Regular expressions may also be used, and can be useful if you have very specific restraints",
            "required": true
          }
        },
        "output": {
          "req": {
            "type": "object"
          },
          "res": {
            "type": "object"
          },
          "next": {
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Creating router path {{input.path}} for get requests."
      },
      "description": "express get",
      "title": "GET",
      "ns": "express",
      "name": "get",
      "env": "server",
      "fn": "output = [input.app, 'get', input.path]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express JSON middleware"
      },
      "description": "Express JSON middleware",
      "title": "JSON",
      "ns": "express",
      "name": "json",
      "env": "server",
      "fn": "output = [input.app, 'use', input.express.json()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "readonly": true,
            "required": true
          },
          "port": {
            "type": "string",
            "title": "Port",
            "description": "The port this express app should listen on",
            "required": true
          }
        },
        "output": {
          "server": {
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "listening on port {{input.port}}, ?address?"
      },
      "description": "express listen",
      "title": "Listen",
      "ns": "express",
      "name": "listen",
      "env": "server",
      "fn": "output = {\n  server: input.app.listen(input.port)\n}\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Logger middleware"
      },
      "description": "Express Logger",
      "title": "Logger",
      "ns": "express",
      "name": "logger",
      "env": "server",
      "fn": "output = [input.app, 'use', input.express.logger()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Method Override Middleware"
      },
      "description": "Express Method Override",
      "title": "Method Override",
      "ns": "express",
      "name": "methodOverride",
      "env": "server",
      "fn": "output = [input.app, 'use', input.express.methodOverride()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Multipart Middleware"
      },
      "description": "Express multipart",
      "title": "Multipart",
      "ns": "express",
      "name": "multipart",
      "env": "server",
      "fn": "output = [input.app, 'use', input.express.multipart()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "required": true,
            "readonly": true
          },
          "path": {
            "type": "string",
            "title": "Router path",
            "required": true
          }
        },
        "output": {
          "output": {
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Adding router path {{input.path}} for POST requests."
      },
      "description": "express post",
      "title": "Post",
      "ns": "express",
      "name": "post",
      "env": "server",
      "fn": "output = [input.app, 'post', input.path]\n"
    },
    {
      "ports": {
        "input": {
          "res": {
            "type": "object",
            "title": "Express response object",
            "required": "true",
            "readonly": "true"
          },
          "body": {
            "type": "string",
            "title": "The response body",
            "required": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Sending response body"
      },
      "description": "express send string",
      "title": "Send",
      "ns": "express",
      "name": "send",
      "env": "server",
      "fn": "input.res.send(input.body)\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using urlencoded middleware"
      },
      "description": "Express urlencoded",
      "title": "Urlencoded",
      "ns": "express",
      "name": "urlencoded",
      "env": "server",
      "fn": "output = [input.app, 'use', input.express.urlencoded()]\n"
    }
  ],
  "twigs": [
    {
      "name": "app",
      "ns": "express",
      "title": "robberthalff.com website",
      "description": "robberthalff.com website",
      "nodes": [
        {
          "id": "0",
          "ns": "express",
          "name": "app"
        },
        {
          "id": "1",
          "ns": "express",
          "name": "get",
          "context": {
            "path": "/"
          }
        },
        {
          "id": "2",
          "ns": "http",
          "name": "request",
          "context": {
            "url": "https://github.com/psichi/chix-website/raw/master/website.md"
          }
        },
        {
          "id": "3",
          "ns": "template",
          "name": "markdown"
        },
        {
          "id": "4",
          "ns": "express",
          "name": "send"
        },
        {
          "id": "5",
          "ns": "express",
          "name": "listen",
          "context": {
            "port": "80"
          }
        },
        {
          "id": "6",
          "ns": "console",
          "name": "log"
        }
      ],
      "links": [
        {
          "source": "0",
          "target": "5",
          "out": "app",
          "in": "app"
        },
        {
          "source": "0",
          "target": "1",
          "out": "app",
          "in": "app"
        },
        {
          "source": "1",
          "target": "4",
          "out": "res",
          "in": "res"
        },
        {
          "source": "2",
          "target": "3",
          "out": "body",
          "in": "body"
        },
        {
          "source": "3",
          "target": "4",
          "out": "body",
          "in": "body",
          "persist": true
        }
      ],
      "nodeDefinitions": {
        "express": {
          "app": {
            "ports": {
              "input": {},
              "output": {
                "app": {
                  "type": "function"
                }
              }
            },
            "require": {
              "express": "latest"
            },
            "description": "express app",
            "ns": "express",
            "name": "app",
            "fn": "output = { app: express() }\n",
            "_id": "525c3827cc80d8653b000040"
          },
          "get": {
            "ports": {
              "input": {
                "app": {
                  "type": "function",
                  "title": "Express app",
                  "readonly": true,
                  "required": true
                },
                "path": {
                  "type": "string",
                  "default": "/",
                  "title": "A router path",
                  "description": "Regular expressions may also be used, and can be useful if you have very specific restraints",
                  "required": true
                }
              },
              "output": {
                "req": {
                  "type": "object"
                },
                "res": {
                  "type": "object"
                },
                "next": {
                  "type": "function"
                }
              }
            },
            "description": "express get",
            "ns": "express",
            "name": "get",
            "fn": "output = [input.app, 'get', input.path]\n",
            "_id": "525c3827cc80d8653b000043"
          },
          "listen": {
            "ports": {
              "input": {
                "app": {
                  "type": "function",
                  "title": "Express app",
                  "readonly": true,
                  "required": true
                },
                "port": {
                  "type": "string",
                  "title": "Port",
                  "description": "The port this express app should listen on",
                  "required": true
                }
              },
              "output": {
                "server": {
                  "type": "object"
                }
              }
            },
            "description": "express listen",
            "ns": "express",
            "name": "listen",
            "fn": "output = { server: input.app.listen(input.port) }\n",
            "_id": "525c3827cc80d8653b000044"
          },
          "send": {
            "ports": {
              "input": {
                "res": {
                  "type": "object",
                  "title": "Express response object",
                  "required": "true",
                  "readonly": "true"
                },
                "body": {
                  "type": "string",
                  "title": "The response body",
                  "required": "true"
                }
              },
              "output": {}
            },
            "description": "express send string",
            "ns": "express",
            "name": "send",
            "fn": "input.res.send(input.body)",
            "_id": "525c3827cc80d8653b000046"
          }
        },
        "http": {
          "request": {
            "ports": {
              "input": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "title": "Url Request",
                  "description": "The url to be requested.",
                  "required": true
                }
              },
              "output": {
                "error": {
                  "type": "object"
                },
                "res": {
                  "type": "object"
                },
                "body": {
                  "type": "string"
                }
              }
            },
            "require": {
              "request": "latest"
            },
            "description": "http request",
            "ns": "http",
            "name": "request",
            "fn": "var obj = {};\nobj.request = request;\noutput = [obj, 'request', input.url]",
            "_id": "525c3827cc80d8653b000001"
          }
        },
        "template": {
          "markdown": {
            "ports": {
              "input": {
                "body": {
                  "type": "string",
                  "title": "Body",
                  "description": "The body of this markdown document",
                  "required": true
                }
              },
              "output": {
                "body": {
                  "type": "string"
                }
              }
            },
            "require": {
              "marked": "latest"
            },
            "description": "Markdown",
            "ns": "template",
            "name": "markdown",
            "fn": "output = { body: marked(input.body) }\n",
            "_id": "525c3827cc80d8653b000025"
          }
        },
        "console": {
          "log": {
            "ports": {
              "input": {
                "msg": {
                  "type": "any",
                  "title": "Log message",
                  "description": "Logs a message to the console"
                }
              },
              "output": {}
            },
            "description": "Console log",
            "ns": "console",
            "name": "log",
            "fn": "console.log(input.msg)",
            "_id": "525c3827cc80d8653b000029"
          }
        }
      }
    },
    {
      "name": "get",
      "ns": "express",
      "title": "ExpressJS get",
      "description": "ExpressJS get",
      "nodes": [
        {
          "id": "0",
          "ns": "express",
          "name": "app"
        },
        {
          "id": "1",
          "ns": "express",
          "name": "get",
          "context": {
            "path": "/"
          }
        },
        {
          "id": "2",
          "ns": "express",
          "name": "send"
        },
        {
          "id": "3",
          "ns": "express",
          "name": "listen",
          "context": {
            "port": "2376"
          }
        }
      ],
      "links": [
        {
          "source": "0",
          "target": "1",
          "out": "app",
          "in": "app"
        },
        {
          "source": "0",
          "target": "3",
          "out": "app",
          "in": "app"
        },
        {
          "source": "1",
          "target": "2",
          "out": "req",
          "in": "req"
        },
        {
          "source": "1",
          "target": "2",
          "out": "res",
          "in": "res"
        },
        {
          "source": "1",
          "target": "2",
          "out": "next",
          "in": "next"
        }
      ],
      "nodeDefinitions": {
        "express": {
          "app": {
            "ports": {
              "input": {},
              "output": {
                "app": {
                  "type": "function"
                }
              }
            },
            "require": {
              "express": "latest"
            },
            "description": "express app",
            "ns": "express",
            "name": "app",
            "fn": "output = { app: express() }\n",
            "_id": "525c3827cc80d8653b000040"
          },
          "get": {
            "ports": {
              "input": {
                "app": {
                  "type": "function",
                  "title": "Express app",
                  "readonly": true,
                  "required": true
                },
                "path": {
                  "type": "string",
                  "default": "/",
                  "title": "A router path",
                  "description": "Regular expressions may also be used, and can be useful if you have very specific restraints",
                  "required": true
                }
              },
              "output": {
                "req": {
                  "type": "object"
                },
                "res": {
                  "type": "object"
                },
                "next": {
                  "type": "function"
                }
              }
            },
            "description": "express get",
            "ns": "express",
            "name": "get",
            "fn": "output = [input.app, 'get', input.path]\n",
            "_id": "525c3827cc80d8653b000043"
          },
          "listen": {
            "ports": {
              "input": {
                "app": {
                  "type": "function",
                  "title": "Express app",
                  "readonly": true,
                  "required": true
                },
                "port": {
                  "type": "string",
                  "title": "Port",
                  "description": "The port this express app should listen on",
                  "required": true
                }
              },
              "output": {
                "server": {
                  "type": "object"
                }
              }
            },
            "description": "express listen",
            "ns": "express",
            "name": "listen",
            "fn": "output = { server: input.app.listen(input.port) }\n",
            "_id": "525c3827cc80d8653b000044"
          },
          "send": {
            "ports": {
              "input": {
                "res": {
                  "type": "object",
                  "title": "Express response object",
                  "required": "true",
                  "readonly": "true"
                },
                "body": {
                  "type": "string",
                  "title": "The response body",
                  "required": "true"
                }
              },
              "output": {}
            },
            "description": "express send string",
            "ns": "express",
            "name": "send",
            "fn": "input.res.send(input.body)",
            "_id": "525c3827cc80d8653b000046"
          }
        }
      }
    }
  ],
  "env": "server"
}