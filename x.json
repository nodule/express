{
  "name": "express",
  "description": "Express for ChiÏ‡",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/express.git"
  },
  "dependencies": {
    "body-parser": "^1.10.0",
    "cors": "2.x.x",
    "express": "latest",
    "express-directory": "0.0.2",
    "express-logger": "0.0.3"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "error": {
            "type": "object",
            "title": "Error message"
          },
          "req": {
            "type": "Stream",
            "title": "Express request object"
          },
          "res": {
            "type": "Stream",
            "title": "Express response object"
          },
          "next": {
            "type": "function",
            "title": "Express response object",
            "readonly": true
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Sending 500 error message"
      },
      "description": "500 error",
      "title": "500",
      "ns": "express",
      "name": "500",
      "env": "server",
      "fn": "/*\nconsole.error($.error.stack);\n//(err, req, res, next){\nconsole.error(err.stack);\n$.res.send(500, err.stack.toString());\n*/\n"
    },
    {
      "dependencies": {
        "npm": {
          "express": "3.x.x"
        }
      },
      "ports": {
        "input": {},
        "output": {
          "app": {
            "title": "App",
            "type": "function"
          },
          "express": {
            "title": "Express",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Creating Express app"
      },
      "description": "express app",
      "title": "App",
      "ns": "express",
      "name": "app",
      "env": "server",
      "fn": "output = {\n  app: $.create(express()),\n  express: $.create(express)\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "body-parser": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {
          "res": {
            "type": "ServerResponse"
          },
          "type": {
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Adding Express Body Parser Middleware"
      },
      "description": "Express Body Parser",
      "title": "Body Parser",
      "ns": "express",
      "name": "bodyParser",
      "env": "server",
      "fn": "output = [$.app, 'use', body_parser.json()];\n"
    },
    {
      "ports": {
        "input": {
          "server": {
            "type": "function",
            "title": "HTTP Server",
            "readonly": true,
            "required": true
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Closing server"
      },
      "description": "Close server (todo: can close any server connection, not just express)",
      "title": "Close",
      "ns": "express",
      "name": "close",
      "env": "server",
      "fn": "on.input.server = function() {\n $.server.close();\n}\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express Compress Middleware"
      },
      "description": "Express Compress",
      "title": "Compress",
      "ns": "express",
      "name": "compress",
      "env": "server",
      "fn": "output = [$.app, 'use', $.express.compress()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express Cookie Parser middleware"
      },
      "description": "Express Cookie Parser",
      "title": "Cookie Parser",
      "ns": "express",
      "name": "cookieParser",
      "env": "server",
      "fn": "output = [$.app, 'use', $.express.cookieParser()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express Cookie Session middleware"
      },
      "description": "Express Cookie Session",
      "title": "Cookie Session",
      "ns": "express",
      "name": "cookieSession",
      "env": "server",
      "fn": "output = [$.app, 'use', $.express.cookieSession()]\n"
    },
    {
      "dependencies": {
        "npm": {
          "cors": "2.x.x"
        }
      },
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          },
          "origin": {
            "type": "string",
            "title": "Origin",
            "description": "Configures the Access-Control-Allow-Origin CORS header. Expects a string (ex: \"http://example.com\")",
            "default": null
          },
          "methods": {
            "type": "array",
            "title": "Methods",
            "description": "Configures the Access-Control-Allow-Methods CORS header. (ex: ['GET', 'PUT', 'POST'])",
            "default": null
          },
          "allowedHeaders": {
            "type": "array",
            "title": "Allowed Headers",
            "description": "Configures the Access-Control-Allow-Headers CORS header. (ex: ['Content-Type', 'Authorization]). If not specified, defaults to reflecting the headers specified in the request's Access-Control-Request-Headers header.",
            "default": null
          },
          "exposedHeaders": {
            "type": "array",
            "title": "Exposed Headers",
            "description": "Configures the Access-Control-Expose-Headers CORS header. (ex: ['Content-Range', 'X-Content-Range]). If not specified, no custom headers are exposed.",
            "default": null
          },
          "credentials": {
            "type": "boolean",
            "title": "Credentials",
            "description": "Configures the Access-Control-Allow-Credentials CORS header.",
            "default": false
          },
          "maxAge": {
            "type": "number",
            "title": "Max Age",
            "description": "Configures the Access-Control-Allow-Max-Age CORS header. Set to an integer to pass the header, otherwise it is omitted.",
            "default": null
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "CORS is a node.js package for providing a Connect/Express middleware that can be used to enable CORS with various options"
      },
      "description": "",
      "title": "CORS",
      "ns": "express",
      "name": "cors",
      "env": "server",
      "fn": "output = [$.app, 'use', cors({\n  origin: $.origin || true,\n  methods: $.methods || undefined,\n  allowedHeaders: $.allowedHeaders || undefined,\n  exposedHeaders: $.exposedHeaders || undefined,\n  credentials: $.credentials || undefined,\n  maxAge: $.maxAge || undefined\n})]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express Cross-site request forgery protection middleware"
      },
      "description": "Express CSRF protection middleware",
      "title": "csrf",
      "ns": "express",
      "name": "csrf",
      "env": "server",
      "fn": "output = [$.app, 'use', $.express.csrf()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "readonly": true,
            "required": true
          },
          "path": {
            "type": "string",
            "default": "/",
            "title": "A router path",
            "description": "Regular expressions may also be used, and can be useful if you have very specific restraints",
            "required": true
          }
        },
        "output": {
          "req": {
            "title": "Request",
            "type": "Stream"
          },
          "res": {
            "title": "Response",
            "type": "Stream"
          },
          "next": {
            "title": "Next",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Creating router path {{input.path}} for delete requests."
      },
      "description": "express delete",
      "title": "DELETE",
      "ns": "express",
      "name": "delete",
      "env": "server",
      "fn": "output = [$.app, 'delete', $.path]\n"
    },
    {
      "dependencies": {
        "npm": {
          "express-directory": "^0.0.2"
        }
      },
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "hidden": {
            "type": "boolean",
            "title": "Hidden",
            "default": false
          },
          "icons": {
            "type": "boolean",
            "title": "Icons",
            "default": false
          },
          "filter": {
            "type": "function",
            "title": "Filter",
            "default": null
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express directory serving middleware"
      },
      "description": "Express directory serving middleware",
      "title": "Directory",
      "ns": "express",
      "name": "directory",
      "env": "server",
      "fn": "output = [$.app, 'use', express_directory($.path, {\n  hidden: $.hidden,\n  icons: $.icons,\n  filter: $.filter\n})];\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "required": true,
            "readonly": true
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "req": {
            "title": "Request",
            "type": "Stream"
          },
          "res": {
            "title": "Response",
            "type": "Stream"
          },
          "next": {
            "title": "Next",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Sending Express error"
      },
      "description": "express error",
      "title": "Error",
      "ns": "express",
      "name": "error",
      "env": "server",
      "fn": "// output = [$.app, 'use']\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "readonly": true,
            "required": true
          },
          "path": {
            "type": "string",
            "default": "/",
            "title": "A router path",
            "description": "Regular expressions may also be used, and can be useful if you have very specific restraints",
            "required": true
          }
        },
        "output": {
          "req": {
            "title": "Request",
            "type": "Stream"
          },
          "res": {
            "title": "Response",
            "type": "Stream"
          },
          "next": {
            "title": "Next",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Creating router path {{input.path}} for get requests."
      },
      "description": "express get",
      "title": "GET",
      "ns": "express",
      "name": "get",
      "env": "server",
      "fn": "output = [$.app, 'get', $.path]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "readonly": true,
            "required": true
          },
          "path": {
            "type": "string",
            "default": "/",
            "title": "A router path",
            "description": "Regular expressions may also be used, and can be useful if you have very specific restraints",
            "required": true
          }
        },
        "output": {
          "req": {
            "title": "Request",
            "type": "Stream"
          },
          "res": {
            "title": "Response",
            "type": "Stream"
          },
          "next": {
            "title": "Next",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Creating router path {{input.path}} for HEAD requests."
      },
      "description": "express head",
      "title": "HEAD",
      "ns": "express",
      "name": "head",
      "env": "server",
      "fn": "output = [$.app, 'head', $.path]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Express JSON middleware"
      },
      "description": "Express JSON middleware",
      "title": "JSON",
      "ns": "express",
      "name": "json",
      "env": "server",
      "fn": "output = [$.app, 'use', $.express.json()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "readonly": true,
            "required": true
          },
          "port": {
            "type": "string",
            "title": "Port",
            "description": "The port this express app should listen on",
            "required": true
          }
        },
        "output": {
          "server": {
            "title": "Server",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "listening on port {{input.port}}, ?address?"
      },
      "description": "express listen",
      "title": "Listen",
      "ns": "express",
      "name": "listen",
      "env": "server",
      "fn": "output = {\n  server: $.create($.app.listen($.port))\n}\n"
    },
    {
      "dependencies": {
        "npm": {
          "express-logger": "^0.0.3"
        }
      },
      "ports": {
        "input": {
          "path": {
            "type": "string",
            "title": "Path",
            "required": "true"
          },
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Logger middleware"
      },
      "description": "Express Logger",
      "title": "Logger",
      "ns": "express",
      "name": "logger",
      "env": "server",
      "fn": "output = [$.app, 'use', expressLogger()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Method Override Middleware"
      },
      "description": "Express Method Override",
      "title": "Method Override",
      "ns": "express",
      "name": "methodOverride",
      "env": "server",
      "fn": "output = [$.app, 'use', $.express.methodOverride()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using Multipart Middleware"
      },
      "description": "Express multipart",
      "title": "Multipart",
      "ns": "express",
      "name": "multipart",
      "env": "server",
      "fn": "output = [$.app, 'use', $.express.multipart()]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "required": true,
            "readonly": true
          },
          "path": {
            "type": "string",
            "title": "Router path",
            "required": true
          }
        },
        "output": {
          "output": {
            "title": "Output",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Adding router path {{input.path}} for OPTIONS requests."
      },
      "description": "express options",
      "title": "Post",
      "ns": "express",
      "name": "options",
      "env": "server",
      "fn": "output = [$.app, 'options', $.path]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "readonly": true,
            "required": true
          },
          "path": {
            "type": "string",
            "default": "/",
            "title": "A router path",
            "description": "Regular expressions may also be used, and can be useful if you have very specific restraints",
            "required": true
          }
        },
        "output": {
          "req": {
            "title": "Request",
            "type": "Stream"
          },
          "res": {
            "title": "Response",
            "type": "Stream"
          },
          "next": {
            "title": "Next",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Creating router path {{input.path}} for PATCH requests."
      },
      "description": "express patch",
      "title": "PATCH",
      "ns": "express",
      "name": "patch",
      "env": "server",
      "fn": "output = [$.app, 'patch', $.path]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "required": true,
            "readonly": true
          },
          "path": {
            "type": "string",
            "title": "Router path",
            "required": true
          }
        },
        "output": {
          "req": {
            "title": "Request",
            "type": "Stream"
          },
          "res": {
            "title": "Response",
            "type": "Stream"
          },
          "next": {
            "title": "Next",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Adding router path {{input.path}} for POST requests."
      },
      "description": "express post",
      "title": "Post",
      "ns": "express",
      "name": "post",
      "env": "server",
      "fn": "output = [$.app, 'post', $.path]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "readonly": true,
            "required": true
          },
          "path": {
            "type": "string",
            "default": "/",
            "title": "A router path",
            "description": "Regular expressions may also be used, and can be useful if you have very specific restraints",
            "required": true
          }
        },
        "output": {
          "req": {
            "title": "Request",
            "type": "Stream"
          },
          "res": {
            "title": "Response",
            "type": "Stream"
          },
          "next": {
            "title": "Next",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Creating router path {{input.path}} for put requests."
      },
      "description": "express put",
      "title": "PUT",
      "ns": "express",
      "name": "put",
      "env": "server",
      "fn": "output = [$.app, 'put', $.path]\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "Express app",
            "required": true,
            "readonly": true
          },
          "path": {
            "type": "string",
            "title": "Router path",
            "required": true
          },
          "type": {
            "enum": [
              "get",
              "post",
              "put",
              "delete",
              "options",
              "head",
              "patch"
            ],
            "title": "Type",
            "default": "get",
            "required": true
          }
        },
        "output": {
          "req": {
            "title": "Request",
            "type": "Stream"
          },
          "res": {
            "title": "Response",
            "type": "Stream"
          }
        }
      },
      "phrases": {
        "active": "Adding router path {{input.path}} for {{input.type}} requests."
      },
      "description": "express route",
      "title": "Router",
      "ns": "express",
      "name": "route",
      "env": "server",
      "fn": "output = [$.app, $.type, $.path]\n"
    },
    {
      "ports": {
        "input": {
          "res": {
            "type": "Stream",
            "title": "Express response object",
            "required": "true",
            "async": true,
            "readonly": "true"
          },
          "body": {
            "type": "string",
            "format": "html",
            "title": "The response body",
            "required": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Sending response body"
      },
      "description": "express send string",
      "async": true,
      "title": "Send",
      "ns": "express",
      "name": "send",
      "env": "server",
      "fn": "on.input.res = function() {\n  $.res.send($.body)\n}\n"
    },
    {
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "App",
            "readonly": "true"
          },
          "express": {
            "type": "function",
            "title": "Express",
            "readonly": "true"
          }
        },
        "output": {}
      },
      "phrases": {
        "active": "Using urlencoded middleware"
      },
      "description": "Express urlencoded",
      "title": "Urlencoded",
      "ns": "express",
      "name": "urlencoded",
      "env": "server",
      "fn": "output = [$.app, 'use', $.express.urlencoded()]\n"
    }
  ],
  "twigs": [],
  "env": "server"
}